                                                Python
*****************************************************************************************************************************************
*************************************************************************************************************************************    
                                        9/10/2024 to 16/10/2024
1)Introduction

2)First Python program-
    Printing basic output

3)Printing in Python - Basic output
    Using the print() function to output text and other data to the screen.

4)Strings in Python-
    Understanding strings, which are sequences of characters enclosed in quotes, used to represent text.

5)Using escape characters in strings-
    Special characters like \n (new line) or \t (tab) used within strings to format text.

6)Variables and data types-
    Introduction to storing data in variables and learning different data types like integers, floats, strings, and booleans.

7)Numeric data types explained-
    Understanding the difference between integers, floats, and other number-related data types.

8)Basic math operators-
    Using operators like +, -, *, and / for arithmetic operations.

9)Writing expressions in Python-
    Combining variables and operators to create expressions that Python evaluates to a value.

10)Order of operations-
    Parentheses ( )
    Exponentiation **
    Unary plus and minus +x, -x
    Multiplication, Division, Modulus, Floor division *, /, %, //
    Addition and Subtraction +, -
    Comparison operators ==, !=, >, <, >=, <=
    Logical NOT not
    Logical AND and
    Logical OR or

11)Negative indexing in strings-
    Accessing characters from the end of the string using negative index values eg a[::-1]

12)Slicing parts of strings-
    Extracting a portion of a string using the slicing syntax string[start:end]

13)Using steps in slices-
    Adding a step value to a slice to skip characters eg s[0:5:2]

14)String operators (like concatenation)-
    Operators like + to concatenate (join) strings and * to repeat strings.

15)Inserting values into strings-
    Using placeholders like %s or {} to insert values dynamically into strings.

16)Different ways to format strings-
    Various methods like .format(), % formatting, or f-strings to format and insert values into strings.
Modern f-strings formatting
Old method of string formatting

17)Using blocks and statements

18)Writing basic if conditions-
    An if condition lets you run code only when a certain condition is true. If the condition is true, the code inside the if block runs.

19)elif for multiple conditions-
    elif is used when you want to check multiple conditions after the if statement. If the first if condition is false, Python moves to the elif to check another condition.

20)Using condition operators-
    Learning comparison operators like ==, !=, >, <, etc., to compare values in conditional statements.

21)Combining conditions with and, or-
    Using logical operators like and and or to combine multiple conditions in an if statement.

22)True and False expressions-
    Understanding how Python evaluates conditions to True or False in logical expressions.
    Truthy and falsy values

23)Checking membership with in-
    sing the in operator to check if a value exists within a sequence like a string or list

24)Writing for loops-
    Using for loops to iterate over sequences like lists or strings and perform repeated actions.

25)Loops inside other loops-
    Creating nested loops, where one loop runs inside another, for tasks like iterating through a grid or matrix.

26)continue and break in loops-
    Using continue to skip the rest of the current loop iteration or break to exit the loop entirely.

27)Repeating tasks with while loop-
    Using a while loop to repeat a block of code as long as a condition remains true.

28)Breaking out of while loops-
    Exiting a while loop before the condition becomes false using the break statement to prevent infinite loops.
                                 
                                     9/10/2024 to 16/10/2024
**************************************************************************************************************************
**************************************************************************************************************************
                                        17/10/2024
1) Lists
    list is a order collection of the data can be accessed by indexing

2)Immutable-
    Can not be changed after they are created.
    Strings
    Tuples
    Frozensets
    Bytes
    Named Tuples
    Integers
    Floats
    Booleans

3)Mutable-
    Can be changed after they are created.
    Lists
    Sets
    Dictionaries 

4)Binary search-
    Finding an element in a sorted list
    It is a way to quickly find an item in a sorted list by repeatedly cutting the search range in half until the item is found or eliminated.
*********************************************************************************************************************************    
*********************************************************************************************************************************    
                                        18/10/2024
1) Appending to a List-
    Adding elements to the end of a list using the append() method.       
2)Removing from a List-
    Removing elements from a list using the remove() method.
3)Inserting into a List-
    Inserting elements into a list using the insert() method.

4)Sorting a List-
    Sorting a list using the sort() method.

5)Sorted-
    Sorting a list using the sorted() function.
    sorted() returns a new sorted list, while sort() changes the original list.

6)Reversing a List-
    Reversing a list using the reverse() method.
    Reversing a list using the reversed() function.

*********************************************************************************************************************************    
*********************************************************************************************************************************    
                                        21/10/2024
1) creating a list-
    Creating a list using the list() function.
    Creating a list using the [] operator.

2)Accessing elements in a list-
    Accessing elements in a list using the index number or using the list name [index].

3)replacing elements in a list-
    Replacing elements in a list using the index number or using the list name [index].
    Replacing elements in a list using the list name [index] = new value.

4)Deleting elements in a list-
    Deleting elements in a list using the del keyword.

5)join method-
    Joining elements in a list using the join() method.

6)split method- 
    Splitting a string into a list using the split() method.

7)Tuples-
    Tuples are immutable lists.
*********************************************************************************************************************************    
*********************************************************************************************************************************    
                                            22/10/2024  
1)sets-
    Sets are unordered collections of unique elements.
    Creating a set using the set() function.

2)Accessing elements in a set-  
    Accessing elements in a set using the index number or using the set name [index].

3)Adding elements to a set-
    Adding elements to a set using the add() method.

4)Removing elements from a set-
    Removing elements from a set using the remove() method.

5)Dictionaries-
    Dictionaries are unordered collections of key-value pairs.

6)Accessing elements in a dictionary-
    Accessing elements in a dictionary using the key or using the dictionary name [key].

7)I/O with Basic Files in Python-
    Using the open() function to open a file and reading/writing to it.

8)Chaining Comparison Operators in Python with Logical Operators-
    Chaining comparison operators in Python with logical operators.

*********************************************************************************************************************************    
*********************************************************************************************************************************    
                                                                24/10/2024
1)Introduction to Functions-
     Functions are reusable blocks of code that perform specific tasks. Call them by name to run their code.

2)def Keywor-
    Use def to create a function, give it a name, and define its inputs (if any).

3)Basics of Function- 
    A function has a name, optional inputs (parameters), and a body with code that runs when the function is called.

4)Logic of Functions- 
    Functions follow specific steps. They can have if statements, loops, and more to decide what to do based on inputs.

5)Tuple Unpacking- 
    When a function returns multiple values in a tuple, you can split them into variables in one step, like x, y = my_function().                                                

********************************************************************************************************************************    
*********************************************************************************************************************************        
                                    25/10/2024

1)Nested Statements and Scope-
     When a function or code block is inside another function, it’s called "nested." Scope defines where variables are accessible. Variables created inside a function can only be used there, while those outside are accessible everywhere in the code.

2)Interactions between Python Functions-
    Functions can call each other, share data, or use each other’s results. This interaction helps break down complex tasks into smaller, manageable functions.                                  

3)Tasks Completed-
    Executed course assignments and tests   

********************************************************************************************************************************    
*********************************************************************************************************************************        


1. Collections Module: 
    Provides specialized data structures like `Counter` (counts items), `defaultdict` (auto-defaults missing values), and `namedtuple` (simple object-like tuples) for efficient data handling.

2. OS Module: 
    Offers tools to interact with the operating system. Lists files, reads/writes files, and handles directories, making it essential for file management in Python.

3. Datetime Module: 
    Manages dates and times. You can get current dates, manipulate time (add days or hours), and convert date strings into Python datetime objects.

4. Math and Random Modules: 
    `math` offers functions for mathematical operations like square roots and factorials. `random` enables random number generation, selections, and more.

5. Python Debugger: 
    `breakpoint()` lets you pause and inspect code during execution. It’s useful for checking variable values and understanding program flow interactively.

6. Regular Expressions Part One: 
    `re.search` finds specific patterns in text. Useful for locating strings or substrings by matching them to predefined patterns.

7. Regular Expressions Part Two: 
    `re.findall` finds all occurrences of a pattern in text, like specific words or sequences. It’s helpful for pattern-based text extraction.

8. Regular Expressions Part Three: 
    `re.compile` creates reusable pattern objects. Using `finditer` on these patterns finds all matches in text with detailed control over search behavior.

9. Timing Your Python Code: 
    `timeit` measures code execution time, helping you understand how fast code runs, useful for performance optimization.

10. Python decorators:
     modify the behavior of functions or methods without changing their code. 
     They wrap functions, adding extra functionality like logging, access control, or timing, making code more reusable.    